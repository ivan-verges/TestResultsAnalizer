@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js

@page "/"

<h1>Test Results Analysis</h1>

<div Class="rz-p-0 rz-p-md-12">
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">JSON Data Input</RadzenText>
        <RadzenTextArea @bind-Value=@jsonData Cols="200" Rows="10" Style="resize:none" />
        <MudSpacer />
        <MudButton Variant="MudBlazor.Variant.Filled" OnClick="@(() => GenerateDemoData())">Generate Demo JSON</MudButton>
        <MudButton Variant="MudBlazor.Variant.Filled" OnClick="@(() => ProcessJsonData())">Analyze JSON Data</MudButton>
        <MudButton StartIcon="@Icons.Custom.FileFormats.FileCode" Variant="MudBlazor.Variant.Filled" OnClick="@(() => DownloadFile())">Download CSV File</MudButton>
    </RadzenCard>
</div>

@if (testCasesByResult.Count > 0 || testRatesByResult.Count > 0)
{
    <div Class="rz-p-0 rz-p-md-12">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Test Cases by Status</RadzenText>
            <RadzenChart>
                <RadzenColumnSeries Data="@testCasesByResult.ToArray()" CategoryProperty="Status" ValueProperty="Count" Fills=@(GetFillColor(testRatesByResult))>
                    <TooltipTemplate Context="data">
                        <div>
                            Test Cases with Status <span>@data.Status</span>:
                            <strong>@data.Count</strong>
                        </div>
                    </TooltipTemplate>
                </RadzenColumnSeries>
            </RadzenChart>
        </RadzenCard>
    </div>

    <div Class="rz-p-0 rz-p-md-12">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Test Cases Rates by Status</RadzenText>
            <RadzenChart>
                <RadzenDonutSeries Data="@testRatesByResult.ToArray()" CategoryProperty="Status" ValueProperty="Count" Fills=@(GetFillColor(testRatesByResult)) TotalAngle="180" StartAngle="180">
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Test Cases</div>
                            <div>by Results</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>
        </RadzenCard>
    </div>

    <div Class="rz-p-0 rz-p-md-12">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Total Time by Test Execution</RadzenText>
            <RadzenChart>
                <RadzenDonutSeries Data="@durationByTestExecution.ToArray()" CategoryProperty="Status" ValueProperty="Count" TotalAngle="180" StartAngle="180">
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Execution Time</div>
                            <div>by Test Execution</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>
        </RadzenCard>
    </div>

    <div Class="rz-p-0 rz-p-md-12">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Total Time by Test Suite</RadzenText>
            <RadzenChart>
                <RadzenDonutSeries Data="@durationByTestSuite.ToArray()" CategoryProperty="Status" ValueProperty="Count" TotalAngle="180" StartAngle="180">
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Execution Time</div>
                            <div>by Test Suite</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>
        </RadzenCard>
    </div>

    <div Class="rz-p-0 rz-p-md-12">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Total Time by Test Case</RadzenText>
            <RadzenChart>
                <RadzenDonutSeries Data="@durationByTestCase.ToArray()" CategoryProperty="Status" ValueProperty="Count" TotalAngle="180" StartAngle="180">
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Execution Time</div>
                            <div>by Test Case</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>
        </RadzenCard>
    </div>

    <div Class="rz-p-0 rz-p-md-12">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Execution Times</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"><b>Total Execution Time in Milliseconds: </b>@analysisResult.ExecutionTimeMS</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"><b>Shortest Execution Time in Milliseconds: </b>@analysisResult.ShortestExecutionTimeMS</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"><b>Longest Execution Time in Milliseconds: </b>@analysisResult.LongestExecutionTimeMS</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"><b>Average Execution Time in Milliseconds: </b>@analysisResult.AverageExecutionTimeMS</RadzenText>
        </RadzenCard>
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Count Resume</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"><b>Total Executions: </b>@analysisResult.TotalExecutions</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"><b>Total Test Suites: </b>@analysisResult.TotalTestSuites</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"><b>Total Test Cases: </b>@analysisResult.TotalTestCases</RadzenText>
        </RadzenCard>
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Tests Count by Status</RadzenText>
            @foreach (DataItem dataItem in testCasesByResult)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"><b>@dataItem.Status Test Cases: </b>@dataItem.Count</RadzenText>                
            }
        </RadzenCard>
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Tests Rate by Status</RadzenText>
            @foreach (DataItem dataItem in testRatesByResult)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"><b>@dataItem.Status Test Rate: </b>@(dataItem.Count * 100) %</RadzenText>
            }
        </RadzenCard>
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H3">Failed Tests</RadzenText>
            @foreach (String failedTest in analysisResult.FailedTests)
            {
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">@failedTest</RadzenText>
            }
        </RadzenCard>
    </div>
}

@code {
    class DataItem
    {
        public string Status { get; set; }
        public double Count { get; set; }
    }

    AnalysisResult analysisResult = new AnalysisResult();

    List<DataItem> durationByTestExecution = new();
    List<DataItem> durationByTestSuite = new();
    List<DataItem> durationByTestCase = new();
    List<DataItem> testCasesByResult = new();
    List<DataItem> testRatesByResult = new();

    private string jsonData;

    async void GenerateDemoData()
    {
        HttpClient client = ClientFactory.CreateClient();
        List<TestExecution> response = await client.GetFromJsonAsync<List<TestExecution>>("https://localhost:5005/api/TestExecutions");

        if (response != null)
        {
            jsonData = Newtonsoft.Json.JsonConvert.SerializeObject(response, Newtonsoft.Json.Formatting.Indented);

            StateHasChanged();
        }
    }

    string[] GetFillColor(List<DataItem> dataItems)
    {
        List<string> colors = new();

        dataItems.ForEach(x =>
        {
            switch (x.Status)
            {
                case "Failed":
                {
                    colors.Add("#ff0000");
                    break;
                }
                case "Passed":
                {
                    colors.Add("#00ff00");
                    break;
                }
                case "Pending":
                {
                    colors.Add("#0000ff");
                    break;
                }
                case "Skipped":
                {
                    colors.Add("#808080");
                    break;
                }
            }
        });

        return colors.ToArray();
    }

    async void ProcessJsonData()
    {
        if (String.IsNullOrEmpty(jsonData))
        {
            return;
        }

        List<TestExecution> testExecutions = Newtonsoft.Json.JsonConvert.DeserializeObject<List<TestExecution>>(jsonData);

        HttpClient client = ClientFactory.CreateClient();
        HttpResponseMessage response = await client.PostAsJsonAsync<List<TestExecution>>("https://localhost:5005/api/Analysis/TestExecutions", testExecutions);

        if (response.IsSuccessStatusCode)
        {
            string responseString = await response.Content.ReadAsStringAsync();
            AnalysisResult responseContent = Newtonsoft.Json.JsonConvert.DeserializeObject<AnalysisResult>(responseString);

            analysisResult = (responseContent != null) ? responseContent : analysisResult;

            durationByTestExecution.Clear();
            durationByTestSuite.Clear();
            durationByTestCase.Clear();
            testCasesByResult.Clear();
            testRatesByResult.Clear();

            foreach (KeyValuePair<string, long> entry in analysisResult.TotalTimeByTestExecution)
            {
                durationByTestExecution.Add(new DataItem() { Count = entry.Value, Status = entry.Key });
            }

            foreach (KeyValuePair<string, long> entry in analysisResult.TotalTimeByTestSuite)
            {
                durationByTestSuite.Add(new DataItem() { Count = entry.Value, Status = entry.Key });
            }

            foreach (KeyValuePair<string, long> entry in analysisResult.TotalTimeByTestCase)
            {
                durationByTestCase.Add(new DataItem() { Count = entry.Value, Status = entry.Key });
            }

            foreach (KeyValuePair<string, int> entry in analysisResult.TestCasesByResult)
            {
                testCasesByResult.Add(new DataItem() { Count = entry.Value, Status = entry.Key });
            }

            foreach (KeyValuePair<string, float> entry in analysisResult.TestRatesByResults)
            {
                testRatesByResult.Add(new DataItem() { Count = entry.Value, Status = entry.Key });
            }

            StateHasChanged();
        }
    }

    private async Task DownloadFile()
    {
        if (string.IsNullOrEmpty(jsonData))
        {
            return;
        }

        HttpClient client = ClientFactory.CreateClient();
        StringContent stringContent = new StringContent(jsonData, System.Text.Encoding.UTF8, "application/json");
        HttpResponseMessage response = await client.PostAsync("https://localhost:5005/api/DownloadCsv", stringContent);

        if (response != null)
        {
            string csvConvent = await response.Content.ReadAsStringAsync();
            string fileName = $"{"Test Executions - " + DateTime.Now.ToString("yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture)}.csv";

            await js.InvokeAsync<object>("window.saveAsFile", fileName, Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(csvConvent)));
        }
    }
}